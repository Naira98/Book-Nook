"""initial migration file

Revision ID: 606ad18714f3
Revises:
Create Date: 2025-07-29 11:05:05.091580

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "606ad18714f3"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authors",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_authors_id"), "authors", ["id"], unique=False)
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=25), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_categories_id"), "categories", ["id"], unique=False)
    op.create_table(
        "promo_codes",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("discount_perc", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_promo_codes_id"), "promo_codes", ["id"], unique=False)
    op.create_table(
        "settings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("deposit_perc", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("borrow_perc", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("delay_perc", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("delivery_fees", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("max_num_of_borrow_books", sa.Integer(), nullable=False),
        sa.CheckConstraint("id = 1", name="settings_singleton"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(length=25), nullable=False),
        sa.Column("last_name", sa.String(length=25), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("national_id", sa.String(length=100), nullable=False),
        sa.Column("phone_number", sa.String(length=20), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("wallet", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVATED", "DEACTIVATED", "BLOCKED", name="userstatus"),
            nullable=False,
        ),
        sa.Column(
            "role",
            sa.Enum("MANAGER", "CLIENT", "EMPLOYEE", "COURIER", name="userrole"),
            nullable=False,
        ),
        sa.Column("interests", sa.String(length=255), nullable=True),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_national_id"), "users", ["national_id"], unique=True)
    op.create_index(
        op.f("ix_users_phone_number"), "users", ["phone_number"], unique=True
    )
    op.create_table(
        "books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("price", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.Column("cover_img", sa.String(), nullable=True),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["authors.id"],
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_books_id"), "books", ["id"], unique=False)
    op.create_table(
        "orders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("pick_up_date", sa.DateTime(), nullable=True),
        sa.Column(
            "pick_up_type",
            sa.Enum("SITE", "COURIER", name="pickuptype"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "CREATED", "ON_THE_WAY", "PICKED_UP", "PROBLEM", name="orderstatus"
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_orders_id"), "orders", ["id"], unique=False)
    op.create_table(
        "promo_code_accounts",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("promo_code_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["promo_code_id"],
            ["promo_codes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "promo_code_id"),
    )
    op.create_table(
        "return_orders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "pick_up_type",
            sa.Enum("SITE", "COURIER", name="pickuptype"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("courier_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "CREATED",
                "ON_THE_WAY",
                "PICKED_UP",
                "CHECKING",
                "PROBLEM",
                name="returnorderstatus",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["courier_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_return_orders_id"), "return_orders", ["id"], unique=False)
    op.create_table(
        "book_details",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("available_stock", sa.Integer(), nullable=False),
        sa.Column(
            "status", sa.Enum("BORROW", "PURCHASE", name="bookstatus"), nullable=False
        ),
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_book_details_book_id"), "book_details", ["book_id"], unique=False
    )
    op.create_index(op.f("ix_book_details_id"), "book_details", ["id"], unique=False)
    op.create_table(
        "notifications",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "ORDER_STATUS_UPDATE",
                "RETURN_ORDER_STATUS_UPDATE",
                "RETURN_REMINDER",
                "NEW_PROMO_CODE",
                "WALLET_UPDATED",
                name="notificationtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("READ", "UNREAD", name="notificationstatus"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.Integer(), nullable=True),
        sa.Column("return_order_id", sa.Integer(), nullable=True),
        sa.Column("promo_code_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["promo_code_id"],
            ["promo_codes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["return_order_id"],
            ["return_orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_notifications_id"), "notifications", ["id"], unique=False)
    op.create_table(
        "borrow_order_books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("borrowing_days", sa.Integer(), nullable=False),
        sa.Column("return_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "borrow_book_problem",
            sa.Enum("NORMAL", "LOST", "DAMAGED", name="borrowbookproblem"),
            nullable=False,
        ),
        sa.Column("deposit_fees", sa.Numeric(precision=5, scale=2), nullable=False),
        sa.Column("borrow_fees", sa.Numeric(precision=5, scale=2), nullable=False),
        sa.Column(
            "delay_fees_per_day", sa.Numeric(precision=5, scale=2), nullable=False
        ),
        sa.Column("book_details_id", sa.Integer(), nullable=False),
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("return_order_id", sa.Integer(), nullable=True),
        sa.Column("promo_code_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["book_details_id"],
            ["book_details.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["promo_code_id"],
            ["promo_codes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["return_order_id"],
            ["return_orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_borrow_order_books_id"), "borrow_order_books", ["id"], unique=False
    )
    op.create_table(
        "carts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("book_details_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_details_id"],
            ["book_details.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "purchase_order_books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("price", sa.Numeric(precision=4, scale=2), nullable=False),
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("book_details_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_details_id"],
            ["book_details.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_purchase_order_books_id"), "purchase_order_books", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_purchase_order_books_id"), table_name="purchase_order_books")
    op.drop_table("purchase_order_books")
    op.drop_table("carts")
    op.drop_index(op.f("ix_borrow_order_books_id"), table_name="borrow_order_books")
    op.drop_table("borrow_order_books")
    op.drop_index(op.f("ix_notifications_id"), table_name="notifications")
    op.drop_table("notifications")
    op.drop_index(op.f("ix_book_details_id"), table_name="book_details")
    op.drop_index(op.f("ix_book_details_book_id"), table_name="book_details")
    op.drop_table("book_details")
    op.drop_index(op.f("ix_return_orders_id"), table_name="return_orders")
    op.drop_table("return_orders")
    op.drop_table("promo_code_accounts")
    op.drop_index(op.f("ix_orders_id"), table_name="orders")
    op.drop_table("orders")
    op.drop_index(op.f("ix_books_id"), table_name="books")
    op.drop_table("books")
    op.drop_index(op.f("ix_users_phone_number"), table_name="users")
    op.drop_index(op.f("ix_users_national_id"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("settings")
    op.drop_index(op.f("ix_promo_codes_id"), table_name="promo_codes")
    op.drop_table("promo_codes")
    op.drop_index(op.f("ix_categories_id"), table_name="categories")
    op.drop_table("categories")
    op.drop_index(op.f("ix_authors_id"), table_name="authors")
    op.drop_table("authors")
    # Remove all enums created in upgrade
    op.execute("DROP TYPE IF EXISTS userstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS userrole CASCADE")
    op.execute("DROP TYPE IF EXISTS pickuptype CASCADE")
    op.execute("DROP TYPE IF EXISTS orderstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS returnorderstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS bookstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS notificationtype CASCADE")
    op.execute("DROP TYPE IF EXISTS notificationstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS borrowbookproblem CASCADE")
    # ### end Alembic commands ###

    # ### end Alembic commands ###
