"""initial migration

Revision ID: b7b36eb6f34c
Revises: 
Create Date: 2025-07-29 00:32:22.385435

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b7b36eb6f34c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('promo_code_accounts')
    op.drop_index(op.f('ix_purchase_order_books_id'), table_name='purchase_order_books')
    op.drop_table('purchase_order_books')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_national_id'), table_name='users')
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_book_details_book_id'), table_name='book_details')
    op.drop_index(op.f('ix_book_details_id'), table_name='book_details')
    op.drop_table('book_details')
    op.drop_index(op.f('ix_return_orders_id'), table_name='return_orders')
    op.drop_table('return_orders')
    op.drop_table('carts')
    op.drop_index(op.f('ix_books_id'), table_name='books')
    op.drop_table('books')
    op.drop_index(op.f('ix_borrow_order_books_id'), table_name='borrow_order_books')
    op.drop_table('borrow_order_books')
    op.drop_index(op.f('ix_promo_codes_id'), table_name='promo_codes')
    op.drop_table('promo_codes')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_authors_id'), table_name='authors')
    op.drop_table('authors')
    op.drop_table('settings')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('settings',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('deposit_perc', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('borrow_perc', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('delay_perc', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('delivery_fees', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('max_num_of_borrow_books', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.CheckConstraint('id = 1', name=op.f('settings_singleton')),
    sa.PrimaryKeyConstraint('id', name=op.f('settings_pkey'))
    )
    op.create_table('authors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('authors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='authors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_authors_id'), 'authors', ['id'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_table('promo_codes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('promo_codes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discount_perc', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='promo_codes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_promo_codes_id'), 'promo_codes', ['id'], unique=False)
    op.create_table('borrow_order_books',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('borrowing_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('return_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('borrow_book_problem', postgresql.ENUM('NORMAL', 'LOST', 'DAMAGED', name='borrowbookproblem'), autoincrement=False, nullable=False),
    sa.Column('book_details_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('return_order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['book_details_id'], ['book_details.id'], name=op.f('borrow_order_books_book_details_id_fkey')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('borrow_order_books_order_id_fkey')),
    sa.ForeignKeyConstraint(['return_order_id'], ['return_orders.id'], name=op.f('borrow_order_books_return_order_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('borrow_order_books_pkey'))
    )
    op.create_index(op.f('ix_borrow_order_books_id'), 'borrow_order_books', ['id'], unique=False)
    op.create_table('books',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('books_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('cover_img', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], name='books_author_id_fkey'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='books_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='books_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_books_id'), 'books', ['id'], unique=False)
    op.create_table('carts',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('book_details_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_details_id'], ['book_details.id'], name=op.f('carts_book_details_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('carts_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'book_details_id', name=op.f('carts_pkey'))
    )
    op.create_table('return_orders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('return_orders_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('pick_up_type', postgresql.ENUM('SITE', 'COURIER', name='pickuptype'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('courier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('CREATED', 'ON_THE_WAY', 'PICKED_UP', 'CHECKING', 'PROBLEM', name='returnorderstatus'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['courier_id'], ['users.id'], name='return_orders_courier_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='return_orders_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='return_orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_return_orders_id'), 'return_orders', ['id'], unique=False)
    op.create_table('book_details',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('book_details_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('available_stock', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('BORROW', 'PURCHASE', name='bookstatus'), autoincrement=False, nullable=False),
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name='book_details_book_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='book_details_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_book_details_id'), 'book_details', ['id'], unique=False)
    op.create_index(op.f('ix_book_details_book_id'), 'book_details', ['book_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('national_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('wallet', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVATED', 'DEACTIVATED', 'BLOCKED', name='userstatus'), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('MANAGER', 'CLIENT', 'EMPLOYEE', 'COURIER', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('interests', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.create_index(op.f('ix_users_national_id'), 'users', ['national_id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('orders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('orders_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('pick_up_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('pick_up_type', postgresql.ENUM('SITE', 'COURIER', name='pickuptype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('CREATED', 'ON_THE_WAY', 'PICKED_UP', 'PROBLEM', name='orderstatus'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='orders_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_table('purchase_order_books',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('book_details_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_details_id'], ['book_details.id'], name=op.f('purchase_order_books_book_details_id_fkey')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('purchase_order_books_order_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('purchase_order_books_pkey'))
    )
    op.create_index(op.f('ix_purchase_order_books_id'), 'purchase_order_books', ['id'], unique=False)
    op.create_table('promo_code_accounts',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('promo_code_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['promo_code_id'], ['promo_codes.id'], name=op.f('promo_code_accounts_promo_code_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('promo_code_accounts_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'promo_code_id', name=op.f('promo_code_accounts_pkey'))
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('ORDER_STATUS_UPDATE', 'RETURN_ORDER_STATUS_UPDATE', 'RETURN_REMINDER', 'NEW_PROMO_CODE', 'WALLET_UPDATED', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('READ', 'UNREAD', name='notificationstatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('return_order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('promo_code_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('notifications_order_id_fkey')),
    sa.ForeignKeyConstraint(['promo_code_id'], ['promo_codes.id'], name=op.f('notifications_promo_code_id_fkey')),
    sa.ForeignKeyConstraint(['return_order_id'], ['return_orders.id'], name=op.f('notifications_return_order_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    # ### end Alembic commands ###
